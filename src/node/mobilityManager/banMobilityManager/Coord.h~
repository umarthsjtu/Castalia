#ifndef _COORD_H
#define _COORD_H

#include <omnetpp.h>
#include <cmath>

/**
 * @brief Class for storing 3D coordinates.
 * Some comparison and basic arithmetic operators are implemented.
 */
class Coord : public cObject
{
public:
	/** @brief Constant with all values set to 0. */
	static const Coord ZERO;

public:
    /** @name x, y and z coordinate of the position. */
    /*@{*/
    double x;
    double y;
    double z;
    /*@}*/

public:
    /** @brief Default constructor. */
    Coord()
        : x(0.0), y(0.0), z(0.0) {}

    /** @brief Initializes a coordinate. */
    Coord(double x, double y, double z = 0.0)
        : x(x), y(y), z(z) {}

    /** @brief Returns a string with the value of the coordinate.*/
    std::string info() const {
        std::stringstream os;
        os << "(" << x << "," << y << "," << z << ")";
        return os.str();
    }

    /** @brief Adds two coordinate vectors. */
    friend Coord operator+(const Coord& a, const Coord& b) {
        Coord tmp = a;
        tmp += b;
        return tmp;
    }

    /** @brief Subtracts two coordinate vectors. */
    friend Coord operator-(const Coord& a, const Coord& b) {
        Coord tmp = a;
        tmp -= b;
        return tmp;
    }

    /**
     * @brief Adds coordinate vector 'a' to this.
     */
    Coord& operator+=(const Coord& a) {
        x += a.x;
        y += a.y;
        z += a.z;
        return *this;
    }

    /**
     * @brief Assigns coordinate vector 'a' to this.
     *
     * This operator can change the dimension of the coordinate.
     */
    Coord& operator=(const Coord& a) {
        x = a.x;
        y = a.y;
        z = a.z;
        return *this;
    }

    /**
     * @brief Subtracts coordinate vector 'a' from this.
     */
    Coord& operator-=(const Coord& a) {
        x -= a.x;
        y -= a.y;
        z -= a.z;
        return *this;
    }

    /**
     * @brief Tests whether two coordinate vectors are not equal.
     *
     * Negation of the operator==.
     */
    friend bool operator!=(const Coord& a, const Coord& b) {
        return !(a==b);
    }

	private:
    /**
     * @brief Returns the remainder r on division of dividend a by divisor n,
     * using floored division. The remainder r has the same sign as the divisor n.
     *
     */
    static double modulo(double a, double n) {
		return (a - n * floor(a/n));
    }

};


inline std::ostream& operator<<(std::ostream& os, const Coord& coord)
{
    return os << "(" << coord.x << "," << coord.y << "," << coord.z << ")";
}

#endif
